# 2021-01-10

## 1.[去除重复字母](https://leetcode-cn.com/problems/remove-duplicate-letters/)

题号：1451

- 最快执行用时:

```js
/**
 * @param {string} s
 * @return {string}
 */
var removeDuplicateLetters = function(s) {
  const stack = []
  for (let i = 0; i < s.length; i++) {
        let char = s[i]
    if (stack.indexOf(char) != -1) {
      continue
    }
    while (stack.length > 0 && stack[stack.length - 1] > char && s.indexOf(stack[stack.length - 1], i) > i) {
      stack.pop()
    }
    stack.push(char)
  }

  return stack.join('')
};
```

- 贪心算法

- 思路：

  - 统计字符出现次数，遍历字符串，当前字符出现次数-1

    - 当前字符不在栈中（目的：去重，如abcabc的第二个a）
      - 栈顶字符 > 当前字符（目的：字典序最小。贪心策略：字符越小越前）
      - 栈顶字符后面还有出现（目的：字符至少出现一次。没有出现不能删）
        - 弹出，即删。重复上面的判断，直到条件不成立
          - 即：数组越界 或 栈顶字符 < 当前字符 或 >，但后面没有该字符

    



其他解法：

解题思路
创建一个 map(对象也行) 统计字符串 s 中每个字符出现次数

创建一个栈 stack 维护字典序最小的字符序列

遍历字符串，维护当前 map，字符出现次数 -1

如果当前栈中没有包含当前遍历到的字符 s[i]（后续用 char 表示），则需要把 char 加入 stack 中

但是加入之前需要判断是否栈中存在比 char 字典序更大的元素，存在则需要判断是否要删除（弹出），此举用于维护 stack 中字典序最小
那么怎么判断栈中的元素是否要删除呢？
遍历当前栈（假设遍历到每个字符为 stack[j]），判断 stack[j] 是否比 char 字典序更大，并且字符串 s 中后续遍历还有和 stack[j] 相同的字符（结合下面代码看更清晰很多哦！），有则弹出（保证 map.get(stack[j]) > 0，不然删除了就无法满足题意每个字符出现一次了）
遍历判断结束后把当前字符 char 加入 stack 中（此时可以保证 stack 中 char 之前的所有字符，只要 map 中个数还大于 0 的，字典序一定比 char 小！）
遍历字符串 s 结束后返回拼接成的字符串即可 stack.join('')

代码

```js
/**
 * @param {string} s
 * @return {string}
 */
var smallestSubsequence = function(s) {
  // 创建一个 map 来存储每个字符出现的个数
  let map = new Map()
  for (let i = 0; i < s.length; i++) {
    let item = s[i]
    if (map.has(item)) {
      map.set(item, map.get(item) + 1)
    } else {
      map.set(item, 1)
    }
  }
  // 维护一个栈 stack 来按顺序存储字典序最小的字符
  let stack = []
  for (let i = 0; i < s.length; i++) {
    let char = s[i]
    map.set(char, map.get(char) - 1) // map 计数减 1
    // 如果当前栈中没有包含此字符，则需要把 char 加入 satack 中
    // 但是加入之前需要判断是否栈中存在比 char 字典序更大的元素，存在则需要判断是否要删除（弹出）
    // 怎么判断是否要删除栈中的元素 stack[j] 呢？
    // 除了满足比 char 字典序大之外，还要判断后续 s 中还能再遍历到与 stack[j] 相同的字符，不然删了就没了...
    if (stack.includes(char) === false) { 
        let j = stack.length
        // 遍历栈，判断栈中是否有比 char 更大的字母，并且字符串 s 中还有此相同字符（stack[j]）
        // 有则弹出（删除），保证字典序
        while(j-- && stack[j] > char && map.get(stack[j])) {
          stack.pop()
        }
        stack.push(char) // 将 char 入栈
    }
  }
  return stack.join('')
};
```



 * 
